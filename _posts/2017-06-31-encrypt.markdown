---
layout:     post
title:      "HTTPS的安全处理"
subtitle:   "加密算法,摘要算法"
date:       2017-07-10
author:     "代思豪"
header-img: "img/test1.gif"
tags:
    - HTTPS
    - 加密算法
    - 摘要算法
    - 技术
---

## 加密算法

* ### 对称加密

	在对称加密算法中，加密使用的密钥和解密使用的密钥是相同的。也就是说，加密和解密都是使用的同一个密钥。因此对称加密算法要保证安全性的话，密钥要做好保密，只能让使用的人知道，不能对外公开。

	#### 常见的对称加密算法有:
	
	DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。

	3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。

	AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别高；

* ### 非对称加密

	非对称加密又称为公开密钥加密算法,非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。

	####常见的非对称加密算法有:

	RSA公钥加密算法:RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。

## 摘要算法

* ### 数字摘要
	
	数字摘要是将任意长度的消息变成固定长度的短消息，它类似于一个自变量是消息的函数，也就是Hash函数。数字摘要就是采用单向Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文这一串密文又称为数字指纹，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。

* ### 常见的摘要算法


	#### MD5 (Message Digest Algorithm MD5) ####

	MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。

	MD5算法具有以下特点：

	1、压缩性：任意长度的数据，算出的MD5值长度都是固定的。

	2、容易计算：从原数据计算出MD5值很容易。

	3、抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。

	4、强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。


	####SHA-1(Secure Hash Algorithm)####

	SHA (Secure Hash Algorithm，译作安全散列算法) 是美国国家安全局 (NSA) 设计，美国国家标准与技术研究院(NIST) 发布的一系列密码散列函数。正式名称为 SHA 的家族第一个成员发布于 1993年。然而人们给它取了一个非正式的名称 SHA-0 以避免与它的后继者混淆。两年之后， SHA-1，第一个 SHA 的后继者发布了。 另外还有四种变体，曾经发布以提升输出的范围和变更一些细微设计： SHA-224, SHA-256, SHA-384 和 SHA-512 (这些有时候也被称做 SHA-2)。

## 摘要认证

* ### 为什么要数字摘要
	
	经由HTTP协议进行通行的数据大都是未经加密的明文,包括请求参数,返回值,因此,外界通过对通信的监听,便可轻而易举地根据请求和响应双方的格式,伪造请求和响应,修改和窃取各种信息。对于普通的非敏感数据,我们更多的关注其真实性和准确性,如何保证在通信过程中数据不被篡改.
* ### 摘要认证的原理
	摘要认证的做法是针对每次请求和响应,按照一定的规则生成数字摘要,数字摘要需要涵盖客户端与服务端通信的内容,以及双方约定好的salt,以此来保证请求与响应不被第三方篡改.
	
	由于传递端和接收端都认为HTTP协议请求参数是无序的,因此客户端与服务端双方需要约定好参数的排序方式,排序完后加上一个密钥secret,也就是加盐算法中的salt,然后通过约定的摘要算法生成数字摘要,传递给服务端.

	在服务端接受到客户端传递的参数后,服务端会采用与客户端相同的策略对参数进行排序,并加上相同的salt,采用相同的摘要方式生成摘要串,然后将服务端生成的摘要串和客户端传递过来的摘要串进行比较,这样就可以得知参数的内容是否被篡改.

	由于摘要算法的不可逆性,摘要认证这种方式能够在一定程度防止信息被篡改,保障通信安全,但是,**摘要认证的安全性取决于salt的安全性**,由于服务端和客户端采用的是相同的salt,一旦salt泄露,通信的安全就没法保证了.


## 签名认证(数字签名) ##

* ### 签名认证的原理
	与摘要认证的方式类似,在对请求参数排序后,在将参数名称和值经过一定的策略组织起来,这是不再是加salt,而是直接通过约定的摘要算法来生成数字摘要,并且使用客户端私钥对数字摘要进行加密,将加密的密文传递给服务端.

	在服务端接受到请求参数后,服务端会采用与客户端相同的策略对参数排序,并使用相同的摘要方式生成摘要串,然后服务端使用客户端的公钥对接受到的密文进行解密,得到客户端生成的摘要串,这样变可以得知参数是否是由客户端生成,并且参数内容是否被篡改.

	**相比于摘要认证,签名认证使用了非对称加密算法**,跟进一步的保证了信息不被篡改

	摘要认证和签名认证都是去保证通信的过程中,信息不被篡改
	

## HTTPS中的信息安全

* ### HTTPS协议原理
	摘要认证和签名认证虽然能够解决数据完整性和同行两端的合法性,但是对于一些敏感数据,如个人隐私数据,用户密码,这些信息如果用明文传输,一旦被截获,相关信息会有较大的泄露风险.

	HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL

	依托SSL协议,HTTPS协议能够确保整个通信过程都是经过加密的,**密钥随机生成**,并且能够通过数字证书验证通信双方的身份,来确保信息的安全
	

* ### SSL协议握手过程
	
	1. 客户端发送一个client hello消息,消息包含协议,sesionid,客户端支持的加密算法,压缩算法等信息,并且还报错客户端产生的随机数.
	2. 服务端响应可以server hello消息,消息包含服务端产生的随机数,洗衣版本信息,sessionid,压缩算法,还包含服务端的数值证书,如果服务端配置的是双向认证,那么服务端将请求客户端的证书
	3. 客户端通过证书链验证服务端证书的有效性
	4. 如果证书验证通过,客户端将向服务端发送见过服务端公钥加密的**预主密钥PerMaster Secret(PMS)**,假如服务端配置了双向认证,客户端会将客户端证书发送给服务端校验
	5. 服务端验证客户端证书的有效性,并用自己的私钥对PMS进行解密,使用client hello与server hello两个步骤所生成的随机数,加上PMS来生成**主密钥**即,Master Secret(MS),然后通过MS生成加密密钥
	6. 客户端也将使用client hello 和server hello两个步骤所生成的随机数,加上PMS生成MS,然后通过MS生成加密谜语
	7. 通知服务端未来信息使用密钥加密
	8. 给服务端发送加密密钥来加密信息,终止握手
	9. 通知客户端使用加密密钥加密
	10. 给客户端发送加密密钥来加密信息,终止握手 

* ### HTTPS通信过程
	
	在服务端与客户端真正的数据交换阶段,实际上数据是通过对称加密算法来实现加密的,密钥为双方ssl握手的时候约定好的加密密钥,客户端首先使用加密密钥来加密请求内容,发送给服务端,服务端使用加密密钥对请求进行解密并处理相应的请求,然后生成响应内容,响应经过加密密钥加密后,发送给客户端,客户端通过加密密钥对响应内容进行解密,获得响应内容
  	

	
	
	
